/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import path from 'path'
import { readFileSync, writeFileSync } from 'fs'
import util from 'util'
import { spawn } from 'child_process'
const { values, positionals } = util.parseArgs({
  args: process.argv.slice(2),
  options: {
    profile: {
      type: 'string',
    },
  },
  strict: true,
  allowPositionals: true,
})

const CARGO_SAFELY_EXIT_CODE = 0

const watch = process.argv.includes('--watch')

build()
  .then((value) => {
    // Regarding cargo's non-zero exit code as an error.
    if (value !== CARGO_SAFELY_EXIT_CODE) {
      process.exit(value)
    }
  })
  .catch((err) => {
    console.error(err)
    process.exit(1)
  })

async function build() {
  return new Promise((resolve, reject) => {
    const args = ['build', '--platform', '--js', 'generated.js', '--dts', 'generated.d.ts']
    const features = []
    const envs = { ...process.env }

    if (values.profile) {
      args.push('--profile', values.profile)
    }
    if (watch) {
      args.push('--watch')
    }
    if (process.env.USE_ZIG) {
      args.push('--cross-compile')
    }
    if (process.env.RUST_TARGET) {
      args.push('--target', process.env.RUST_TARGET)
    }
    if (!process.env.DISABLE_PLUGIN) {
      args.push('--no-default-features')
      // features.push('plugin')
    }
    args.push('--no-dts-cache')
    // if (!values.profile || values.profile === 'dev') {
    //   features.push('color-backtrace')
    // }
    if (
      values.profile === 'release-debug' &&
      (!process.env.RUST_TARGET ||
        process.env.RUST_TARGET.includes('linux') ||
        process.env.RUST_TARGET.includes('darwin'))
    ) {
      features.push('sftrace-setup')
      envs.RUSTFLAGS = '-Zinstrument-xray=always'
    }
    if (values.profile === 'release') {
      features.push('info-level')
    }
    if (features.length) {
      args.push('--features ' + features.join(','))
    }

    if (
      positionals.length > 0 ||
      values.profile === 'release' ||
      values.profile === 'release-debug' ||
      values.profile === 'profiling'
    ) {
      // napi need `--` to separate options and positional arguments.
      args.push('--')

      if (values.profile === 'release' || values.profile === 'release-debug' || values.profile === 'profiling') {
        // allows to optimize std with current compile arguments
        // and avoids std code generate unwind table to save size.
        args.push('-Zbuild-std=panic_abort,std')
      }

      if (positionals.length > 0) {
        args.push(...positionals)
      }
    }

    console.log(`Run command: napi ${args.join(' ')}`)

    const cp = spawn('napi', args, {
      stdio: 'inherit',
      shell: true,
      env: envs,
    })

    cp.on('error', reject)
    cp.on('exit', (code) => {
      if (code === CARGO_SAFELY_EXIT_CODE) {
        // Fix an issue where napi cli does not generate `string_enum` with `enum`s.
        const dts = path.resolve(__dirname, '../binding.d.ts')
        writeFileSync(
          dts,
          readFileSync(dts, 'utf8')
            .replaceAll('const enum', 'enum')
            // Remove the NormalModule type declaration generated by N-API.
            // We manually declare the NormalModule type in banner.d.ts
            // This allows users to extend NormalModule with static methods through type augmentation.
            .replaceAll(
              /export\s+declare\s+class\s+NormalModule\s*\{([\s\S]*?)\}\s*(?=\n\s*(?:export|declare|class|$))/g,
              '',
            ),
        )
      }
      resolve(code)
    })
  })
}
